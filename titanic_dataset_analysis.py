# -*- coding: utf-8 -*-
"""Titanic_dataset_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b1SbwVPIS66H1nQDnr6pHuqF-soK1ioc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/sample_data/Titanic-Dataset.csv")
df.head()

df.drop(columns=["PassengerId","Name","Ticket"],axis=1,inplace=True)

df.head()

df.info()

df['Cabin'].value_counts()

df.drop(columns=["Cabin"],axis=1,inplace=True)

df.info()

df = df[df["Age"].notnull()].copy()

df.info()

df = df[df["Embarked"].notnull()].copy()

df.info()

X = df.drop(columns=["Survived"],axis=1)
y = df["Survived"]

X.info()

#Removed this code

X.shape, y.shape

X_category_df = X[['Pclass','Gender','Embarked']]
X_remaining_df = X[['Age','SibSp','Parch','Fare']]
X_category_df.shape, X_remaining_df.shape

from sklearn import preprocessing

le = preprocessing.LabelEncoder()
X_category_df_le = X_category_df.apply(le.fit_transform)
X_category_df_le.head()

X_after_le = pd.concat([X_category_df_le,X_remaining_df],axis=1,ignore_index=False)
X_after_le.head()

X_train, X_test, y_train, y_test = train_test_split(X_after_le, y, test_size=0.25, stratify = y)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

X_train.info()

X_train['Pclass'].value_counts()

X_train['Pclass'][:5]

X_train['Embarked'].value_counts()

numerical_df_X_train = X_train[['Age','SibSp','Parch','Fare']]
numerical_df_X_train.head()

numerical_df_X_test = X_test[['Age','SibSp','Parch','Fare']]
numerical_df_X_test.head()

# Categoric features are: Embarked, Pclass, Gender
# Numreical features are: Age,SibSp,Parch,Fare

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(numerical_df_X_train) # This function is used to learning the data
X_tr_numeric = scaler.transform(numerical_df_X_train) # This function is used convert the data into learnt format

X_tst_numeric = scaler.transform(numerical_df_X_test)
X_tst_numeric.shape

X_tst_numeric[:5]

X_tr_numeric.shape

X_tr_numeric[:5]

category_df_X_train = X_train[['Pclass','Gender','Embarked']]
category_df_X_train.head()

category_df_X_test = X_test[['Pclass','Gender','Embarked']]
category_df_X_test.head()

from sklearn.preprocessing import OneHotEncoder

enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(category_df_X_train)
X_train_cat_ohe = enc.transform(category_df_X_train)
X_test_cat_ohe = enc.transform(category_df_X_test)

X_train_cat_ohe.shape,X_test_cat_ohe.shape

type(X_train_cat_ohe.toarray())

X_train_cat_ohe.toarray()[:5]

X_test_cat_ohe.toarray()[:5]

X_train_df = pd.concat([pd.DataFrame(X_train_cat_ohe.toarray()),pd.DataFrame(X_tr_numeric)],axis=1,ignore_index=True)
X_test_df = pd.concat([pd.DataFrame(X_test_cat_ohe.toarray()),pd.DataFrame(X_tst_numeric)],axis=1,ignore_index=True)

X_train_df.shape, X_test_df.shape

X_train_df.rename(columns={0:'Pclass_1',1:'Pclass_2',2:'Pclass_3',3:'Gender_1',4:'Gender_2',5:'Embarked_1',6:'Embarked_2',7:'Embarked_3',8:'Age',9:'SibSp',10:'Parch',11:'Fare'},inplace=True)

X_test_df.rename(columns={0:'Pclass_1',1:'Pclass_2',2:'Pclass_3',3:'Gender_1',4:'Gender_2',5:'Embarked_1',6:'Embarked_2',7:'Embarked_3',8:'Age',9:'SibSp',10:'Parch',11:'Fare'},inplace=True)

X_train_df.head()

X_test_df.head()

col_lst = X_train_df.columns

print(col_lst)

""" EDA Techniques:
1. Histogram
2. Distribution Plots
3. Box Plots
4. Scatter Plots
5. KDE Plots
6. Correlation Matrix

# Statistical Modelling

1. Hypothesis testing
2. KS Test"""

from sklearn.neighbors import KNeighborsClassifier

neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(np.array(X_train_df),np.array(y_train))

y_predict_values = neigh.predict(np.array(X_test_df))

y_predict_values[:5]

y_test[:5]

from sklearn.metrics import classification_report


print(classification_report(np.array(y_test), y_predict_values, target_names=['Dead','Alive']))

from sklearn.metrics import confusion_matrix

print(confusion_matrix(np.array(y_test), y_predict_values))

X_tr, X_cv, y_tr, y_cv = train_test_split(X_train_df, y_train, test_size=0.15, stratify = y_train)
X_tr.shape, X_cv.shape, y_tr.shape, y_cv.shape

neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(np.array(X_tr),np.array(y_tr))

y_predict_values = neigh.predict(np.array(X_cv))
print(classification_report(np.array(y_cv), y_predict_values, target_names=['Dead','Alive']))

y_predict_values = neigh.predict(np.array(X_test_df))
print(classification_report(np.array(y_test), y_predict_values, target_names=['Dead','Alive']))

from sklearn.model_selection import GridSearchCV

params = {'n_neighbors':[1,2,3,4,5,6,7,8,9,10]}

neigh = KNeighborsClassifier()
clf_cv = GridSearchCV(neigh, params,cv=10,return_train_score=True,scoring='accuracy')
clf_cv.fit(np.array(X_tr),np.array(y_tr))
print(clf_cv.best_params_)

neigh = KNeighborsClassifier(n_neighbors=10)
neigh.fit(np.array(X_tr),np.array(y_tr))

y_predict_values = neigh.predict(np.array(X_cv))
print(classification_report(np.array(y_cv), y_predict_values, target_names=['Dead','Alive']))